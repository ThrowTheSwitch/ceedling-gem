#!/usr/bin/env ruby
require "rubygems"
require "thor"
require "ceedling"
require "fileutils"

class CeedlingTasks < Thor
  include Thor::Actions

  def self.source_root
    File.dirname(__FILE__) + "/.."
  end

  desc "new PROJECT_NAME", "create a new ceedling project"
  method_option :nodocs, :type => :boolean, :default => false, :desc => "No docs in vendor directory"
  def new(name)
    directory Ceedling::NEW_PROJECT_DIR, name
    remove_dir "#{name}/vendor/ceedling/docs" if options[:nodocs]
    puts "\n"
    puts "Project '#{name}' created!"
    puts " - Tool documentation is located in vendor/ceedling/docs" if not options[:nodocs]
    puts " - Execute 'rake -T' to view available test & build tasks"
    puts ''
  end

  desc "update DIRECTORY", "update the vendor/ceedling directory under the given project root"
  long_desc <<-d
  copies the newest ceedling code into the vendor/ceedling directory under the given project root.

  NOTE: this task assumes the vendor/ceedling directory has already been deleted

  Example: [ceedling update .] will deposit the latest ceedling files to ./vendor/ceedling 
  d
  def update(project_dir)
    directory "new_project_template/vendor", "#{project_dir}/vendor"
  end

  desc "examples", "list available example projects"
  def examples()
    puts "Available sample projects:"
    FileUtils.cd(File.dirname(__FILE__) + "/../examples") do
      Dir["*"].each {|proj| puts "  #{proj}"}
    end
  end

  desc "example PROJ_NAME [DEST]", "create specified example project (in DEST, if specified)"
  def example(proj_name, dest=".")
    dest = "." if dest.nil?
    directory Ceedling::NEW_PROJECT_DIR, dest
    remove_file "#{dest}/project.yml"
    remove_file "#{dest}/rakefile.rb"
    directory "examples/#{proj_name}", dest
    puts "\n"
    puts "Example project '#{proj_name}' created!"
    puts " - Tool documentation is located in vendor/ceedling/docs"
    puts " - Execute 'rake -T' to view available test & build tasks"
    puts ''
  end

  desc "version", "print all ceedling gem and library versions"
  def version
    puts "       Gem:: #{Ceedling::Version::GEM}"
    puts "  Ceedling:: #{Ceedling::Version::CEEDLING}"
    puts "CException:: #{Ceedling::Version::CEXCEPTION}"
    puts "     CMock:: #{Ceedling::Version::CMOCK}"
    puts "     Unity:: #{Ceedling::Version::UNITY}"
  end
end
CeedlingTasks.start
